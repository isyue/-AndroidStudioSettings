<templateSet group="QuTuoAppJAVA">
  <template name="qurxget" value="/**&#10; * $methodDoc$&#10; */&#10;public void $fangfaming$&#10;()&#10;{&#10;    RetrofitUtil.getRetrofitUtil().getRetrofitToken(APP.BaseUrl);&#10;    IService service = retrofit.create(IService.class);&#10;    //设置请求参数&#10;    $reqBean$ paramsReq = new $reqBean$();&#10;    String gsonStr = GsonUtils.getGson().toJson(paramsReq);&#10;    String extendStr = ToGsonUtils.tojson(gsonStr);&#10;    Observable&lt;XResponse$Bean$&gt; signTimeList = service.$getMoth$(extendStr);&#10;    signTimeList.observeOn(AndroidSchedulers.mainThread())&#10;            .subscribeOn(Schedulers.io())&#10;            .subscribe(new MyObserver&lt;XResponse$Bean$&gt;(context) {&#10;                @Override&#10;                public void onNext(XResponse$Bean$ listXResponse) {&#10;                    $Bean$ data = listXResponse.getData();&#10;                    if (data != null) {&#10;                        //需要展示的数据&#10;                        view.showData(data);&#10;                    }&#10;                }&#10;            });&#10;}" description="趣拓专用rxJava的Get请求" toReformat="false" toShortenFQNames="true">
    <variable name="methodDoc" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="fangfaming" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="reqBean" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Bean" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="getMoth" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qurecy" value="PullLoadMoreRecyclerView recyclerView = findViewById(R.id.refresh_recycler);&#10;        recyclerView.setLinearLayout();//设置线性布局&#10;        recyclerView.setRefreshing(true);//显示刷新样式&#10;        recyclerView.setPullRefreshEnable(false);//禁止下拉刷新&#10;        recyclerView.setPushRefreshEnable(false);//禁止上拉刷新&#10;        recyclerView.setFooterViewText(&quot;加载更多&quot;);//设置下拉刷新文字&#10;        recyclerView.setOnPullLoadMoreListener(this);//设置监听" description="趣拓专用模板-刷新recy" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qurxpost" value="/**&#10; * $methodDoc$&#10; */&#10;public void $mothName$(){&#10;    loadingDialog.show();&#10;    RetrofitUtil.getRetrofitUtil().getRetrofitToken(APP.BaseUrl);&#10;    IService service = retrofit.create(IService.class);&#10;    $ReqBean$ req = new $ReqBean$();&#10;    String s = GsonUtils.getGson().toJson(req);&#10;    HashMap hashMap = ToGsonUtils.toHashMap(s);&#10;    Observable&lt;XResponse$bean$&gt; setManager = service.$getMoth$(hashMap);&#10;    setManager.observeOn(AndroidSchedulers.mainThread())&#10;            .subscribeOn(Schedulers.io())&#10;            .subscribe(new MyObserver&lt;XResponse$bean$&gt;(context) {&#10;                @Override&#10;                public void onNext(XResponse$bean$ listXResponse) {&#10;                    loadingDialog.dismiss();&#10;                    $bean$ data = listXResponse.getData();&#10;                    if (listXResponse.getCode() == 0 &amp;&amp; data != null) {&#10;                        //需要展示的数据&#10;                        view.showData(data);&#10;                    } else {&#10;                        ToastUtils.showMsg(context, AppUtils.checkString(listXResponse.getMsg()));&#10;                    }&#10;                }&#10;&#10;                @Override&#10;                public void onError(Throwable e) {&#10;                    super.onError(e);&#10;                    loadingDialog.dismiss();&#10;                }&#10;            });&#10;}" description="趣拓专用模板txJava的Post请求" toReformat="true" toShortenFQNames="true">
    <variable name="methodDoc" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="mothName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ReqBean" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="bean" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="getMoth" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qucheckstr" value="AppUtils.checkString($str$)" description="检查字符串为null安全" toReformat="false" toShortenFQNames="true">
    <variable name="str" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quchecklist" value="AppUtils.checkList($list$)" description="检查列表为null安全" toReformat="false" toShortenFQNames="true">
    <variable name="list" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quinitworksshow" value="/**&#10;* 初始化RecyclerView作品图片展示&#10;*/&#10;private void initWorksShow() {&#10;    RecyclerView rvPicture = (RecyclerView) findViewById(R.id.rv_picture);&#10;    GridLayoutManager gridLayoutManager = new GridLayoutManager(context, 4) {&#10;        @Override&#10;        public boolean canScrollVertically() {&#10;            return false;&#10;        }&#10;    };&#10;    photoViewAdapter = new PhotoViewAdapter(context, new ArrayList&lt;String&gt;());&#10;    rvPicture.setHasFixedSize(true);&#10;    rvPicture.addItemDecoration(new ListBigSpaceDecoration(context));&#10;    rvPicture.setLayoutManager(gridLayoutManager);&#10;    rvPicture.setAdapter(photoViewAdapter);&#10;&#10;    photoViewAdapter.setOnItemClickListener(new OnItemClickListener() {&#10;        @Override&#10;        public void onItemClick(View view, int position) {&#10;            ImagePagerActivity.ImageSize imageSize = new ImagePagerActivity.ImageSize(0, 0);&#10;            ImagePagerActivity.startImagePagerActivity(context, photoViewAdapter.getList(), position, imageSize);&#10;        }&#10;&#10;        @Override&#10;        public void onItemLongClick(View view, int position) {&#10;&#10;        }&#10;    });&#10;}" description="初始化RecyclerView作品图片展示" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qugetstr" value="AppUtils.getString($str$)" description="趣拓专用获取字符串资源" toReformat="true" toShortenFQNames="true">
    <variable name="str" expression="capitalizeAndUnderscore(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quinitinputtext" value="/**&#10;     * 初始化输入文字效果&#10;     */&#10;    private void initInputText() {&#10;       final EditText etReport = findViewById(R.id.et_input_text);&#10;        final TextView tvTextCount = findViewById(R.id.tv_text_count);&#10;        etReport.setHint(&quot;请输入内容&quot;);&#10;        Spanned spanned = AppUtils.formatColorText(context, 0, MAX_INPUT_LENGTH);&#10;        tvTextCount.setText(spanned);&#10;    // 解决scrollView中嵌套EditText导致不能上下滑动的问题&#10;    etReport.setOnTouchListener(new View.OnTouchListener() {&#10;        @Override&#10;        public boolean onTouch(View v, MotionEvent event) {&#10;            switch (v.getId()) {&#10;                case R.id.et_report:&#10;                    // 解决scrollView中嵌套EditText导致不能上下滑动的问题&#10;                    v.getParent().requestDisallowInterceptTouchEvent(true);&#10;                    switch (event.getAction() &amp; MotionEvent.ACTION_MASK) {&#10;                        case MotionEvent.ACTION_UP:&#10;                            v.getParent().requestDisallowInterceptTouchEvent(false);&#10;                            break;&#10;                    }&#10;            }&#10;            return false;&#10;        }&#10;    });&#10;    /*输入文字监听*/&#10;        etReport.addTextChangedListener(new TextWatcher() {&#10;            @Override&#10;            public void beforeTextChanged(CharSequence s, int start, int count, int after) {&#10;&#10;            }&#10;&#10;            @Override&#10;            public void onTextChanged(CharSequence s, int start, int before, int count) {&#10;            }&#10;&#10;            @Override&#10;            public void afterTextChanged(Editable s) {&#10;                String text = s.toString();&#10;                int restLength = MAX_INPUT_LENGTH - text.length();&#10;                if (restLength &lt; 1) {&#10;                    tvTextCount.setText(&quot;已达最大字数限制&quot;);&#10;                    tvTextCount.setTextColor(AppUtils.getColor(context, R.color.red_o));&#10;                    /*如果输入超出限制字符，则截取并定位光标到文末*/&#10;                    if (restLength &lt; 0) {&#10;                        etReport.setText(text.substring(0, MAX_INPUT_LENGTH));&#10;                        etReport.setSelection(MAX_INPUT_LENGTH);&#10;                    }&#10;                } else {&#10;                    tvTextCount.setText(AppUtils.formatColorText(context, text.length(), MAX_INPUT_LENGTH));&#10;                }&#10;            }&#10;        });&#10;    }" description="初始化输入，有文字限定标志" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quinitaddfile" value="/**&#10; * 初始化添加附件&#10; */&#10;private void initAddFile() {&#10;    TextView tvTitleText = findViewById(R.id.tv_title_text);&#10;    ImageView ivMsg = findViewById(R.id.ibt_question1);&#10;    RecyclerView recyAddFile = findViewById(R.id.rv_picture);&#10;    ivMsg.setVisibility(View.GONE);&#10;    ivMsg.setOnClickListener(new View.OnClickListener() {&#10;        @Override&#10;        public void onClick(View v) {&#10;            //上传附件说明&#10;            AlertDialog alertDialog = new AlertDialog(context);&#10;            alertDialog.builder().setTitle(&quot;上传附件&quot;)&#10;                    .setMsg(&quot;图片单张大小不得超过8M &quot;)&#10;                    .setPositiveButton(&quot;知道了&quot;, null)&#10;                    .show();&#10;        }&#10;    });&#10;    GridLayoutManager gridLayoutManager = new GridLayoutManager(context, 4) {&#10;        @Override&#10;        public boolean canScrollVertically() {&#10;            return false;&#10;        }&#10;    };&#10;    recyAddFile.setLayoutManager(gridLayoutManager);&#10;    mPhotoAdapter = new PublicAddImageAdapter(context, new ArrayList(), MAX_SELECT_NUM, PublicAddImageAdapter.FORMAT_FILE);&#10;    recyAddFile.setAdapter(mPhotoAdapter);&#10;    recyAddFile.setHasFixedSize(true);&#10;    photoDialog = new SelectPhotoDialog(context);&#10;    mPhotoAdapter.setOnPhotoAddListener(new PublicAddImageAdapter.OnPhotoAddListener() {&#10;        @Override&#10;        public void onPhotoAdd() {&#10;            //添加文件&#10;            if (photoDialog != null) {&#10;                photoDialog.show();&#10;            }&#10;        }&#10;&#10;        @Override&#10;        public void onItemClick(int position) {&#10;            ImagePagerActivity.ImageSize imageSize = new ImagePagerActivity.ImageSize(0, 0);&#10;            ImagePagerActivity.startImagePagerActivity(context, mSelectList, position, imageSize);&#10;        }&#10;    });&#10;&#10;    photoDialog.setSelecPhoto(new SelectPhotoDialog.SelecPhoto() {&#10;        @Override&#10;        public void photo() {//调用图库&#10;            mSelectList.clear();&#10;            mSelectList.addAll(mPhotoAdapter.getList());&#10;            Intent intent = new Intent(context, SelectPictureActivity.class);&#10;            intent.putExtra(SelectPictureActivity.INTENT_MAX_NUM, mSelectList.size());&#10;            startActivityForResult(intent, PHOTOCODE);&#10;        }&#10;&#10;        @Override&#10;        public void camera() {//调用相机&#10;            mSelectList.clear();&#10;            mSelectList.addAll(mPhotoAdapter.getList());&#10;            camPicPath = FileSaveUtil.getSavePicPath();&#10;            Intent openCameraIntent = new Intent(&#10;                    MediaStore.ACTION_IMAGE_CAPTURE);&#10;            Uri uri = Uri.fromFile(new File(camPicPath));&#10;            openCameraIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);&#10;            startActivityForResult(openCameraIntent, Global.CAMERA_RESULT_CODE);&#10;        }&#10;    });&#10;}&#10;@Override&#10;protected void onActivityResult(int requestCode, int resultCode, Intent data) {&#10;    super.onActivityResult(requestCode, resultCode, data);&#10;    if (resultCode == RESULT_OK || resultCode == PHOTORESULT &amp;&amp; data != null) {&#10;        switch (requestCode) {&#10;            case PHOTOCODE:&#10;                // 图片选择&#10;                if (data != null) {&#10;                    List&lt;String&gt; phothpathList =&#10;                            data.getStringArrayListExtra(SelectPictureActivity.INTENT_SELECTED_PICTURE);&#10;                    for (String path : phothpathList) {&#10;                        mSelectList.add(path);&#10;                    }&#10;                    //展示选择的图片&#10;                    mPhotoAdapter.refresh(mSelectList);&#10;                }&#10;                break;&#10;            case Global.CAMERA_RESULT_CODE:&#10;                FileInputStream is = null;&#10;                try {&#10;                    is = new FileInputStream(camPicPath);&#10;                    File file = new File(camPicPath); // 图片文件路径&#10;                    if (file.exists()) {&#10;                        mSelectList.add(camPicPath);&#10;                        // initViewFj();&#10;                        if (mPhotoAdapter != null)&#10;                            mPhotoAdapter.refresh(mSelectList);&#10;                        Log.e(&quot;tujson&quot;, camPicPath);&#10;                    } else {&#10;                        ToastUtils.showMsg(context, &quot;该文件不存在!&quot;);&#10;                    }&#10;                } catch (FileNotFoundException e) {&#10;                    e.printStackTrace();&#10;                } finally {&#10;                    try {&#10;                        is.close();&#10;                    } catch (IOException e) {&#10;                        e.printStackTrace();&#10;                    }&#10;                }&#10;                break;&#10;        }&#10;    }&#10;}" description="添加附件" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quitemimageshow" value="RecyclerView rvPicture = (RecyclerView) holder.getView(R.id.rv_picture);&#10;        GridLayoutManager gridLayoutManager = new GridLayoutManager(mContext, 4) {&#10;            @Override&#10;            public boolean canScrollVertically() {&#10;                return false;&#10;            }&#10;        };&#10;        List&lt;String&gt; photoList = new ArrayList&lt;&gt;();&#10;        for (AttachListBean bean : item.getAttachList()) {&#10;            photoList.add(bean.url);&#10;        }&#10;        final PhotoViewAdapter photoViewAdapter = new PhotoViewAdapter(mContext, photoList);&#10;        rvPicture.setHasFixedSize(true);&#10;        rvPicture.setLayoutManager(gridLayoutManager);&#10;        rvPicture.setAdapter(photoViewAdapter);&#10;        photoViewAdapter.setOnItemClickListener(new OnItemClickListener() {&#10;            @Override&#10;            public void onItemClick(View view, int position) {&#10;                ImagePagerActivity.ImageSize imageSize = new ImagePagerActivity.ImageSize(0, 0);&#10;                ImagePagerActivity.startImagePagerActivity(context, photoViewAdapter.getList(), position, imageSize);&#10;            }&#10;&#10;            @Override&#10;            public void onItemLongClick(View view, int position) {&#10;&#10;            }&#10;        });" description="列表里面的附件展示" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quinitpager" value="private void initPagerFragment() {&#10;        final List&lt;Fragment&gt; fragments = new ArrayList&lt;&gt;();&#10;        /*tab父View*/&#10;        LinearLayout layTab = findViewById(R.id.lay_tab);&#10;        /*第一个Tab*/&#10;        LinearLayout layTabOne = findViewById(R.id.lay_tab_one);&#10;        final TextView tvTabOne = findViewById(R.id.tv_tab_one_name);&#10;        final View vTabOne = findViewById(R.id.v_tab_one);&#10;        tvTabOne.setText(&quot;$oneText$&quot;);&#10;        /*第二个tab*/&#10;        LinearLayout layTabTwo = findViewById(R.id.lay_tab_two);&#10;        final TextView tvTabTwo = findViewById(R.id.tv_tab_two_name);&#10;        final View vTabTwo = findViewById(R.id.v_tab_two);&#10;        tvTabTwo.setText(&quot;$twoText$&quot;);&#10;        final ViewPager fragmentPager = findViewById(R.id.fragment_viewpager);&#10;&#10;        tvTabOne.setSelected(true);&#10;        vTabOne.setSelected(true);&#10;        tvTabOne.setTypeface(Typeface.DEFAULT_BOLD);&#10;&#10;        layTab.setVisibility(View.VISIBLE);&#10;&#10;        layTabOne.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                //$oneText$&#10;                fragmentPager.setCurrentItem(0);&#10;            }&#10;        });&#10;        layTabTwo.setOnClickListener(new View.OnClickListener() {&#10;            @Override&#10;            public void onClick(View v) {&#10;                //$twoText$&#10;                fragmentPager.setCurrentItem(1);&#10;            }&#10;        });&#10;&#10;        fragments.add($oneFragment$);&#10;        fragments.add($twoFragment$);&#10;        FragmentPagerAdapter fragmentPagerAdapter = new FragmentPagerAdapter(getSupportFragmentManager()) {&#10;            @Override&#10;            public Fragment getItem(int position) {&#10;                return fragments.get(position);&#10;            }&#10;&#10;            @Override&#10;            public int getCount() {&#10;                return fragments.size();&#10;            }&#10;        };&#10;        fragmentPager.setAdapter(fragmentPagerAdapter);&#10;        fragmentPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {&#10;            @Override&#10;            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {&#10;&#10;            }&#10;&#10;            @Override&#10;            public void onPageSelected(int position) {&#10;                switch (position) {&#10;                    case 0://第一个tab&#10;                        tvTabTwo.setSelected(false);&#10;                        vTabTwo.setSelected(false);&#10;                        tvTabTwo.setTypeface(Typeface.DEFAULT);&#10;                        tvTabOne.setSelected(true);&#10;                        vTabOne.setSelected(true);&#10;                        tvTabOne.setTypeface(Typeface.DEFAULT_BOLD);&#10;                        break;&#10;                    case 1://第二个tab&#10;                        tvTabOne.setSelected(false);&#10;                        vTabOne.setSelected(false);&#10;                        tvTabOne.setTypeface(Typeface.DEFAULT);&#10;                        tvTabTwo.setSelected(true);&#10;                        vTabTwo.setSelected(true);&#10;                        tvTabTwo.setTypeface(Typeface.DEFAULT_BOLD);&#10;                        break;&#10;                }&#10;            }&#10;&#10;            @Override&#10;            public void onPageScrollStateChanged(int state) {&#10;            }&#10;        });&#10;    }" description="双项ViewPager初始化专用" toReformat="false" toShortenFQNames="true">
    <variable name="oneText" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="twoText" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="oneFragment" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="twoFragment" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quinitToolbar" value="private void initToolbarLayout() {&#10;        AppBarLayout toolbarLayout = (AppBarLayout) findViewById(R.id.appbar);&#10;        toolbarLayout.addOnOffsetChangedListener(new AppBarStateChangeListener() {&#10;            @Override&#10;            public void onStateChanged(AppBarLayout appBarLayout, State state) {&#10;                if (state == State.EXPANDED) {&#10;                    //展开状态&#10;                    getTitleUtil().setText(&quot;&quot;);&#10;                } else if (state == State.COLLAPSED) {&#10;                    getTitleUtil().setText(AppUtils.checkString($title$));&#10;                    //折叠状态&#10;                } else {&#10;                    //中间状态&#10;                    getTitleUtil().setText(&quot;&quot;);&#10;                }&#10;            }&#10;        });&#10;    }" description="折叠状态栏监听折叠状态" toReformat="false" toShortenFQNames="true">
    <variable name="title" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quinitToolbarLayout" value="private void initToolbarLayout() {&#10;        AppBarLayout toolbarLayout = (AppBarLayout) findViewById(R.id.appbar);&#10;        toolbarLayout.addOnOffsetChangedListener(new AppBarStateChangeListener() {&#10;            @Override&#10;            public void onStateChanged(AppBarLayout appBarLayout, AppBarStateChangeListener.State state) {&#10;                if (state == State.EXPANDED) {&#10;                    //展开状态&#10;                    getTitleUtil().setText(&quot;&quot;);&#10;                } else if (state == State.COLLAPSED) {&#10;                    getTitleUtil().setText(AppUtils.checkString(proName));&#10;                    //折叠状态&#10;                } else {&#10;                    //中间状态&#10;                    getTitleUtil().setText(&quot;&quot;);&#10;                }&#10;            }&#10;        });&#10;    }" description="折叠状态栏动态显示标题" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qucheckintstr" value="AppUtils.checkIntStr($a$)" description="检查是数字的字符串" toReformat="false" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qucheckobject" value="AppUtils.checkObject($a$)?$a$:new $b$" description="检查对象是否为null" toReformat="false" toShortenFQNames="true">
    <variable name="a" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="b" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="quinitbanner" value="/**&#10;* 初始化Branner&#10;*/&#10;private void initBanners() {&#10;    //最好将此寻找控件放置在初始化方法中，及onCrate()&#10;    ComplexImageBannerView imageBannerView = getView().findViewById(R.id.vp_branner);&#10;    BannersUtils bannersUtils = new BannersUtils(getActivity(), imageBannerView, listBanners);&#10;    bannersUtils.initBranner();&#10;    bannersUtils.setSelectAnim();&#10;    bannersUtils.setOnItemClick();&#10;    }" description="趣拓初始化横幅Banner图" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qustrtoint" value="StringUtils.toInt($str$)" description="将字符串转为int值" toReformat="false" toShortenFQNames="true">
    <variable name="str" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="qunewattach" value="AttachListBean attachListBean = new AttachListBean();&#10;                            attachListBean.setUrl($url$);&#10;                            attachListBean.setFileSize(file.length());&#10;                            attachListBean.setName(file.getName());&#10;                            attachListBean.setFileType($type$);" description="格式化文件信息" toReformat="true" toShortenFQNames="true">
    <variable name="url" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>